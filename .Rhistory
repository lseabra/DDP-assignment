lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit <- lm(y ~ x)
hatvalues(fit)
max(hatvalues(fit))
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit <- lm(y ~ x)
dfbetas(fit)
influence.measures(fit)$infmat[5,"dfb.x"]
par(mar=c(0,0,0,0)); set.seed(1234); x = rep(1:4,each=4); y = rep(1:4,4)
plot(x,y,xaxt="n",yaxt="n",cex=3,col=c(rep("blue",15),rep("red",1)),pch=19)
par(mar=c(0,0,0,0));
plot(x,y,xaxt="n",yaxt="n",cex=3,col=c(rep("blue",8),rep("red",8)),pch=19)
data(iris); library(ggplot2)
names(iris)
table(iris$Species)
inTrain <- createDataPartition(y=iris$Species,
p=0.7, list=FALSE)
training <- iris[inTrain,]
testing <- iris[-inTrain,]
dim(training); dim(testing)
?createDataPartition
??createDataPartition
library(caret)
inTrain <- createDataPartition(y=iris$Species,
p=0.7, list=FALSE)
training <- iris[inTrain,]
testing <- iris[-inTrain,]
dim(training); dim(testing)
qplot(Petal.Width,Sepal.Width,colour=Species,data=training)
modFit <- train(Species ~ .,method="rpart",data=training)
print(modFit$finalModel)
plot(modFit$finalModel, uniform=TRUE,
main="Classification Tree")
text(modFit$finalModel, use.n=TRUE, all=TRUE, cex=.8)
library(rattle)
fancyRpartPlot(modFit$finalModel)
install.package("rattle")
install.packages("rattle")
library(rattle)
fancyRpartPlot(modFit$finalModel)
library(rattle)
fancyRpartPlot(modFit$finalModel)
library(caret)
fancyRpartPlot(modFit$finalModel)
library(ggplot2)
fancyRpartPlot(modFit$finalModel)
modFit <- train(Species ~ .,method="rpart",data=training)
print(modFit$finalModel)
plot(modFit$finalModel, uniform=TRUE,
main="Classification Tree")
text(modFit$finalModel, use.n=TRUE, all=TRUE, cex=.8)
install.packages("rattle")
library(rattle)
fancyRpartPlot(modFit$finalModel)
modFit <- train(Species ~ .,method="rpart",data=training)
print(modFit$finalModel)
plot(modFit$finalModel, uniform=TRUE,
main="Classification Tree")
text(modFit$finalModel, use.n=TRUE, all=TRUE, cex=.8)
inTrain <- createDataPartition(y=iris$Species,
p=0.7, list=FALSE)
training <- iris[inTrain,]
testing <- iris[-inTrain,]
dim(training); dim(testing)
qplot(Petal.Width,Sepal.Width,colour=Species,data=training)
modFit <- train(Species ~ .,method="rpart",data=training)
print(modFit$finalModel)
plot(modFit$finalModel, uniform=TRUE,
main="Classification Tree")
text(modFit$finalModel, use.n=TRUE, all=TRUE, cex=.8)
library(rattle)
fancyRpartPlot(modFit$finalModel)
fancyRpartPlot(modFit$finalModel)
predict(modFit,newdata=testing)
library(ElemStatLearn); data(ozone,package="ElemStatLearn")
ozone <- ozone[order(ozone$ozone),]
head(ozone)
install.packages("ElemStatLearn")
library(ElemStatLearn); data(ozone,package="ElemStatLearn")
ozone <- ozone[order(ozone$ozone),]
head(ozone)
ll <- matrix(NA,nrow=10,ncol=155)
for(i in 1:10){
ss <- sample(1:dim(ozone)[1],replace=T)
ozone0 <- ozone[ss,]; ozone0 <- ozone0[order(ozone0$ozone),]
loess0 <- loess(temperature ~ ozone,data=ozone0,span=0.2)
ll[i,] <- predict(loess0,newdata=data.frame(ozone=1:155))
}
plot(ozone$ozone,ozone$temperature,pch=19,cex=0.5)
for(i in 1:10){lines(1:155,ll[i,],col="grey",lwd=2)}
lines(1:155,apply(ll,2,mean),col="red",lwd=2)
predictors = data.frame(ozone=ozone$ozone)
temperature = ozone$temperature
treebag <- bag(predictors, temperature, B = 10,
bagControl = bagControl(fit = ctreeBag$fit,
predict = ctreeBag$pred,
aggregate = ctreeBag$aggregate))
library(caret)
predictors = data.frame(ozone=ozone$ozone)
temperature = ozone$temperature
treebag <- bag(predictors, temperature, B = 10,
bagControl = bagControl(fit = ctreeBag$fit,
predict = ctreeBag$pred,
aggregate = ctreeBag$aggregate))
plot(ozone$ozone,temperature,col='lightgrey',pch=19)
points(ozone$ozone,predict(treebag$fits[[1]]$fit,predictors),pch=19,col="red")
points(ozone$ozone,predict(treebag,predictors),pch=19,col="blue")
predictors = data.frame(ozone=ozone$ozone)
temperature = ozone$temperature
treebag <- bag(predictors, temperature, B = 10,
bagControl = bagControl(fit = ctreeBag$fit,
predict = ctreeBag$pred,
aggregate = ctreeBag$aggregate))
install.packages("party")
library(party)
treebag <- bag(predictors, temperature, B = 10,
bagControl = bagControl(fit = ctreeBag$fit,
predict = ctreeBag$pred,
aggregate = ctreeBag$aggregate))
plot(ozone$ozone,temperature,col='lightgrey',pch=19)
points(ozone$ozone,predict(treebag$fits[[1]]$fit,predictors),pch=19,col="red")
points(ozone$ozone,predict(treebag,predictors),pch=19,col="blue")
ctreeBag$fit
ctreeBag$pred
ctreeBag$aggregate
library(caret)
modFit <- train(Species~ .,data=training,method="rf",prox=TRUE)
modFit
data(iris); library(ggplot2)
inTrain <- createDataPartition(y=iris$Species,
p=0.7, list=FALSE)
training <- iris[inTrain,]
testing <- iris[-inTrain,]
library(caret)
modFit <- train(Species~ .,data=training,method="rf",prox=TRUE)
install.packages("randomForest")
library(randomForest)
data(iris); library(ggplot2)
inTrain <- createDataPartition(y=iris$Species,
p=0.7, list=FALSE)
training <- iris[inTrain,]
testing <- iris[-inTrain,]
library(caret)
modFit <- train(Species~ .,data=training,method="rf",prox=TRUE)
modFit
getTree(modFit$finalModel,k=2)
modFit
getTree(modFit$finalModel,k=2)
irisP <- classCenter(training[,c(3,4)], training$Species, modFit$finalModel$prox)
irisP <- as.data.frame(irisP); irisP$Species <- rownames(irisP)
p <- qplot(Petal.Width, Petal.Length, col=Species,data=training)
p + geom_point(aes(x=Petal.Width,y=Petal.Length,col=Species),size=5,shape=4,data=irisP)
pred <- predict(modFit,testing); testing$predRight <- pred==testing$Species
table(pred,testing$Species)
qplot(Petal.Width,Petal.Length,colour=predRight,data=testing,main="newdata Predictions")
library(ISLR); data(Wage); library(ggplot2); library(caret);
Wage <- subset(Wage,select=-c(logwage))
inTrain <- createDataPartition(y=Wage$wage,
p=0.7, list=FALSE)
training <- Wage[inTrain,]; testing <- Wage[-inTrain,]
modFit <- train(wage ~ ., method="gbm",data=training,verbose=FALSE)
install.packages("gbm")
library(gbm)
modFit <- train(wage ~ ., method="gbm",data=training,verbose=FALSE)
print(modFit)
qplot(predict(modFit,testing),wage,data=testing)
library(knitr)
library(caret)
data(iris); library(ggplot2)
names(iris)
table(iris$Species)
training <- iris[inTrain,]
testing <- iris[-inTrain,]
dim(training); dim(testing)
inTrain <- createDataPartition(y=iris$Species,
p=0.7, list=FALSE)
training <- iris[inTrain,]
testing <- iris[-inTrain,]
dim(training); dim(testing)
modlda = train(Species ~ .,data=training,method="lda")
modnb = train(Species ~ ., data=training,method="nb")
install.packages("klaR")
library(klaR)
modlda = train(Species ~ .,data=training,method="lda")
modnb = train(Species ~ ., data=training,method="nb")
plda = predict(modlda,testing); pnb = predict(modnb,testing)
table(plda,pnb)
equalPredictions = (plda==pnb)
qplot(Petal.Width,Sepal.Width,colour=equalPredictions,data=testing)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
?createDataPartition
head(segmentationOriginal)
training<-segmentationOriginal[segmentationOriginal$Case=="Train",]
testing<-segmentationOriginal[segmentationOriginal$Case=="Test",]
dim(training); dim(testing)
model<-train(Class ~ .,
data = training,
method = "rpart")
library(rattle)
fancyRpartPlot(model$finalModel)
library(rpart)
fancyRpartPlot(model$finalModel)
print(model)library(rpart)
print(model)
predData <- training[1:3,]
which(colnames(training)=="TotalIntenCh2")
which(colnames(training)=="FiberWidthCh1")
which(colnames(training)=="PerimStatusCh1")
predData[1,c(103,50,85)]=c(23000,10,2)
predData[2,c(103,50,85)]=c(50000,10,100)
predData[3,c(103,50,85)]=c(57000,8,100)
predict(fit,predData)
?predict
set.seed(125)
model<-train(Class ~ .,
data = training,
method = "rpart")
library(rattle)
library(rpart)
fancyRpartPlot(model$finalModel)
print(model)
predData <- training[1:3,]
which(colnames(training)=="TotalIntenCh2")
which(colnames(training)=="FiberWidthCh1")
which(colnames(training)=="PerimStatusCh1")
predData[1,c(103,50,85)]=c(23000,10,2)
predData[2,c(103,50,85)]=c(50000,10,100)
predData[3,c(103,50,85)]=c(57000,8,100)
predict(fit,predData)
predData[1,c(103,50,85)] <- c(23000,10,2)
predData[2,c(103,50,85)] <- c(50000,10,100)
predData[3,c(103,50,85)] <- c(57000,8,100)
predData
predict(model,predData)
which(colnames(training)=="TotalIntenCh2")
which(colnames(training)=="VarIntenCh4")
predData <- training[1:4,]
which(colnames(training)=="TotalIntenCh2")
which(colnames(training)=="FiberWidthCh1")
which(colnames(training)=="PerimStatusCh1")
which(colnames(training)=="VarIntenCh4")
predData[1,c(103,50,85,112)] <- c(23000,10,2,NA)
predData[2,c(103,50,85,112)] <- c(50000,10,NA,100)
predData[3,c(103,50,85,112)] <- c(57000,8,NA,100)
predData[4,c(103,50,85,112)] <- c(NA,8,2,100)
predict(model,predData)
keep = c('Case', 'Class', 'Cell')
sampleData = training[1:4,]
sampleData[1,!(names(sampleData) %in% keep)] = rep(NA, length(names(sampleData))-length(keep))
sampleData[1, c('TotalIntenCh2', 'FiberWidthCh1', 'PerimStatusCh1')] = c(23000, 10, 2)
sampleData[2, c('TotalIntenCh2', 'FiberWidthCh1', 'VarIntenCh4')] = c(50000, 10, 100)
sampleData[3, c('TotalIntenCh2', 'FiberWidthCh1', 'VarIntenCh4')] = c(57000, 8, 100)
sampleData[4, c('FiberWidthCh1', 'VarIntenCh4', 'PerimStatusCh1')] = c(8, 100, 2)
predict(model, sampleData[2,], verbose = TRUE)
keep = c('Case', 'Class', 'Cell')
sampleData = training[1:4,]
sampleData[1,!(names(sampleData) %in% keep)] = rep(NA, length(names(sampleData))-length(keep))
sampleData[1, c('TotalIntenCh2', 'FiberWidthCh1', 'PerimStatusCh1')] = c(23000, 10, 2)
sampleData[2, c('TotalIntenCh2', 'FiberWidthCh1', 'VarIntenCh4')] = c(50000, 10, 100)
sampleData[3, c('TotalIntenCh2', 'FiberWidthCh1', 'VarIntenCh4')] = c(57000, 8, 100)
sampleData[4, c('FiberWidthCh1', 'VarIntenCh4', 'PerimStatusCh1')] = c(8, 100, 2)
sampleData
sampleData[2,]
predict(model, sampleData[2,])
predict(model, sampleData)
which(colnames(training)=="TotalIntenCh2")
which(colnames(training)=="FiberWidthCh1")
which(colnames(training)=="PerimStatusCh1")
which(colnames(training)=="VarIntenCh4")
predData <- training[1:4,]
predData[1, c('TotalIntenCh2', 'FiberWidthCh1', 'PerimStatusCh1')] <- c(23000,  10,   2)
predData[2, c('TotalIntenCh2', 'FiberWidthCh1', 'VarIntenCh4')]    <- c(50000,  10, 100)
predData[3, c('TotalIntenCh2', 'FiberWidthCh1', 'VarIntenCh4')]    <- c(57000,   8, 100)
predData[3, c('FiberWidthCh1', 'VarIntenCh4',   'PerimStatusCh1')] <- c(    8, 100,   2)
predict(fit,predData)
predData <- training[1:4,]
predData[1, c('TotalIntenCh2', 'FiberWidthCh1', 'PerimStatusCh1')] <- c(23000,  10,   2)
predData[2, c('TotalIntenCh2', 'FiberWidthCh1', 'VarIntenCh4')]    <- c(50000,  10, 100)
predData[3, c('TotalIntenCh2', 'FiberWidthCh1', 'VarIntenCh4')]    <- c(57000,   8, 100)
predData[4, c('FiberWidthCh1', 'VarIntenCh4',   'PerimStatusCh1')] <- c(    8, 100,   2)
predict(fit,predData)
predData <- training[1:4,]
predData[1, c('TotalIntenCh2', 'FiberWidthCh1', 'PerimStatusCh1')] <- c(23000,  10,   2)
predData[2, c('TotalIntenCh2', 'FiberWidthCh1', 'VarIntenCh4')]    <- c(50000,  10, 100)
predData[3, c('TotalIntenCh2', 'FiberWidthCh1', 'VarIntenCh4')]    <- c(57000,   8, 100)
predData[4, c('FiberWidthCh1', 'VarIntenCh4',   'PerimStatusCh1')] <- c(    8, 100,   2)
predict(model, predData)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
head(segmentationOriginal)
library(caret)
training<-segmentationOriginal[segmentationOriginal$Case=="Train",]
testing<-segmentationOriginal[segmentationOriginal$Case=="Test",]
dim(training); dim(testing)
set.seed(125)
model<-train(Class ~ .,
data = training,
method = "rpart")
library(rattle)
library(rpart)
fancyRpartPlot(model$finalModel)
print(model)
predData[1, c('TotalIntenCh2', 'FiberWidthCh1', 'PerimStatusCh1')] <- c(23000,  10,   2)
predData <- training[1:1,]
predData[1, c('TotalIntenCh2', 'FiberWidthCh1', 'PerimStatusCh1')] <- c(23000,  10,   2)
predict(model, predData)
predData[1, c('TotalIntenCh2', 'FiberWidthCh1', 'VarIntenCh4')]    <- c(50000,  10, 100)
predict(model, predData)
predData[1, c('TotalIntenCh2', 'FiberWidthCh1', 'VarIntenCh4')]    <- c(57000,   8, 100)
predict(model, predData)
predData[1, c('FiberWidthCh1', 'VarIntenCh4',   'PerimStatusCh1')] <- c(    8, 100,   2)
predict(model, predData)
keep = c('Case', 'Class', 'Cell')
sampleData = training[1:4,]
sampleData[1,!(names(sampleData) %in% keep)] = rep(NA, length(names(sampleData))-length(keep))
sampleData[1, c('TotalIntenCh2', 'FiberWidthCh1', 'PerimStatusCh1')] = c(23000, 10, 2)
sampleData[2, c('TotalIntenCh2', 'FiberWidthCh1', 'VarIntenCh4')] = c(50000, 10, 100)
sampleData[3, c('TotalIntenCh2', 'FiberWidthCh1', 'VarIntenCh4')] = c(57000, 8, 100)
sampleData[4, c('FiberWidthCh1', 'VarIntenCh4', 'PerimStatusCh1')] = c(8, 100, 2)
predict(model, sampleData[2,], verbose = TRUE)
predict(model, sampleData[1,], verbose = TRUE)
keep = c('Case', 'Class', 'Cell')
sampleData = training[1:4,]
sampleData[1,!(names(sampleData) %in% keep)] = rep(NA, length(names(sampleData))-length(keep))
sampleData[1, c('TotalIntenCh2', 'FiberWidthCh1', 'PerimStatusCh1')] = c(23000, 10, 2)
sampleData[2, c('TotalIntenCh2', 'FiberWidthCh1', 'VarIntenCh4')] = c(50000, 10, 100)
sampleData[3, c('TotalIntenCh2', 'FiberWidthCh1', 'VarIntenCh4')] = c(57000, 8, 100)
sampleData[4, c('FiberWidthCh1', 'VarIntenCh4', 'PerimStatusCh1')] = c(8, 100, 2)
predict(model, sampleData)
predict(model, sampleData[1,])
predict(model, sampleData[2,])
predict(model, sampleData[3,])
predict(model, sampleData[4,])
predict(model, sampleData[1,])
predict(model, sampleData[2,])
predict(model, sampleData[3,])
predict(model, sampleData[4,])
library(pgmm)
data(olive)
olive = olive[,-1]
install.packages("pgmm")
library(pgmm)
data(olive)
olive = olive[,-1]
newdata = as.data.frame(t(colMeans(olive)))
tree <- train(Area ~ .,method="rpart",data=olive)
print(tree$finalModel)
newdata = as.data.frame(t(colMeans(olive)))
predict(model, newdata)
data(olive)
olive = olive[,-1]
tree <- train(Area ~ .,method="rpart",data=olive)
print(tree$finalModel)
newdata = as.data.frame(t(colMeans(olive)))
predict(model, newdata)
predict(tree, newdata)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
seed(13234)
set.seed(13234)
fit <- train(chd ~ age
+ alcohol
+ obesity
+ tobacco
+ typea
+ ldl, data=trainSA, method="glm", family="binomial")
fit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl,
data=trainSA, method="glm", family="binomial")
model = train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, method = 'glm', family = 'binomial', data = trainSA)
fit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl,
data=trainSA, method="glm", family="binomial")
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(trainSA$chd,predict(fit,trainSA))
missClass(testSA$chd,predict(fit,testSA))
missClass(testSA$chd,predict(fit,testSA))
missClass(trainSA$chd,predict(fit,trainSA))
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel = rbind(vowel.test,vowel.train)
vowel$y = factor(vowel$y)
vowel.train$y = factor(vowel.train$y)
set.seed(33833)
fit <- randomForest(y~.,data=vowel.train)
imps <- varImp(fit)
order(imps)
set.seed(33833)
model = train(y ~ ., method = 'rf', data = vowel.train, prox = TRUE)  # This takes some time...
print(model)
vi = varImp(model$finalModel)
vi = data.frame(var = 1:nrow(vi), imp = vi$Overall)
vi[order(vi$imp),]
library(randomForest)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
modelfit <- randomForest(y ~ ., data = vowel.train, importance = FALSE)
order(varImp(modelfit), decreasing = TRUE)
=amcars
?amcars
?mtcars
?mtcars
?mtcars
library(MASS)
data(shuttle)
head(shuttle)
shuttle$useNum[shuttle$use == 'auto'] <- 1
shuttle$useNum[shuttle$use == 'noauto'] <- 0
shuttle$windFactor <- factor(shuttle$wind)
fit <- glm(shuttle$useNum ~ shuttle$windFactor - 1, family='binomial')
summary(fit)
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), x.s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), slider = x(0, 2, step = 0.1))
manipulate(myPlot, s = slider(0, 2, step = 0.1))
library(rCharts)
install.packages("rcharts")
install.packages("rCharts")
data(airquality)
data(airquality)
head(airquality)
dTable(airquality, sPaginationType = "full_numbers")
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
library(methods)
library(ggvis)
install.package("ggvis")
install.packages("ggvis")
library(dplyr)
library(googleVis)
install.packages("googleVis")
library(manipulate)
library(plotly)
install.packages("plotly")
library(ggplot2)
library(knitr)
require(rCharts)
install.packages("rChars")
install.packages("rCharts")
install.packages("rchart")
require(devtools)
install_github('rCharts', 'ramnathv')
install.packages("devtools")
require(devtools)
install_github('rCharts', 'ramnathv')
install_github('rCharts', 'ramnathv')
require(rCharts)
install_github('ramnathv/rCharts')
require(rCharts)
install.packages("shiny")
libray(shiny)
require(rCharts)
library (devtools)
install_github('slidify', 'ramnathv')
install_github('ramnathv/slidify')
install_github('ramnathv/rCharts')
install_github('ramnathv/slidifyLibraries')
require(rCharts)
require(slidify)
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
library(rCharts)
data(airquality)
dTable(airquality, sPaginationType = "full_numbers")
library(knitr)
library(shiny)
setwd("C:\\data\\synched\\local\\trabalho\\pessoais\\formação\\2015\\15.06 Data Science Specialization\\09 Developing Data Products\\assignment")
runApp()
data("ChickWeight")
runApp()
plot(ChickWeight$weight)
data("ChickWeight")
x <- ChickWeight[ChickWeight$Time == input$age & ChickWeight$Diet %in% input$diet, ]
data("ChickWeight")
x <- ChickWeight[ChickWeight$Time == input$age & ChickWeight$Diet %in% input$diet, ]
runApp()
boxplot(ChickWeight$weight)
boxplot(ChickWeight$weight ~ ChickWeight$Diet)
bwplot(ChickWeight$weight ~ ChickWeight$Diet)
knit("about.Rmd")
runApp()
knit("about.Rmd")
runApp()
ChickWeight
max(ChickWeight$Time)
